group 'net.morimekta.providence.gradle'

version '0.3.0'
if (project.hasProperty('providenceVersion')) {
    version = project.providenceVersion
}

repositories {
    mavenLocal()
    mavenCentral()
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()

        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }

        dependencies {
            classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
        }
    }
}

apply plugin: "com.gradle.plugin-publish"
apply plugin: 'groovy'
apply plugin: 'maven'

def providence_version = version

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

task createApplicationProperties {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/application.properties").text = "providence.version=${version}\n"
    }
}

import java.text.SimpleDateFormat

jar {
    manifest {
        attributes( "Implementation-Title":         rootProject.name,
                    "Implementation-Version":       version,
                    "Implementation-Vendor":        "morimekta.net/providence",
                    "Implementation-Class":         "net.morimekta.providence.gradle.ProvidencePlugin",
                    "description":                  "Providence model generator plugin for gradle.",
                    "Main-Class":                   "net.morimekta.providence.gradle.ProvidencePlugin",
                    "Build-Date":                   new SimpleDateFormat("yyyy-MM-dd").format(new Date()),
                    "Build-Gradle":                 project.gradle.gradleVersion
                   )
    }
}

dependencies {
    compile localGroovy()
    compile gradleApi()

    compile "net.morimekta.providence:providence-core:${providence_version}"
    compile "net.morimekta.providence:providence-reflect:${providence_version}"
    compile "net.morimekta.providence:providence-generator:${providence_version}"
    compile "net.morimekta.providence:providence-generator-java:${providence_version}"

    testCompile gradleTestKit()
    testCompile 'junit:junit:4.12'

    testRuntime files(createClasspathManifest)
    testRuntime files(createApplicationProperties)
}

task wrapper(type: Wrapper) {
    // gradleVersion = '2.12'
    gradleVersion = '3.2' // version required
}
